openapi: 3.0.1
info:
  title: MOVIE'S PROGRAM
  description: 'CINEMA STD21001'
  version: 1.0.0
servers:
- url: https://std21001.com
tags:
- name: Films
- name: Room
- name: Projection

paths:
  /film:
    get:
      tags:
      - Films
      summary: Get all films
      operationId: getFilms 
      description: 'Get all films with details'
      parameters:
      - name: page
        in: query
        schema:
          type: integer
      - name: page_size
        in: query
        required: true
        schema:
          type: integer
      responses:
        200:
          description: List of films
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Films'
        400:
          description: Bad request

    post:
      tags:
      - Films
      summary: Create new film
      operationId: createNewFilms
      description: Create new film from an array
      requestBody:
        description: film to be created
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CreateFilms'
      responses:
        200:
          description: film created
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Films'
        400:
          description: Bad request
          content: {}
            
    put:
      tags:
      - Films
      summary: modifies entirely a film list
      operationId: UpdatingIntegratefilm
      description: Update existing film
      parameters:
        - name: id
          in: query
          required: true
          schema: 
            type: integer
      responses:
          200:
            description: film Updated
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/CreateFilms'
          400:
            description: Bad request
    patch:
      tags:
      - Films
      summary: Update existing film 
      description: |
        Possible updates openapi:
        * title: change
        * release_date: change
        * duration: change
        * room_project: change
      operationId: UpdateExistingfilm
      requestBody:
        required: true
        content:
          application/json:
            schema:
                $ref: '#/components/schemas/Films'
            examples:
              changeTitle:
                summary: Change the title
                description: How to change title
                value:
                  id: 1
                  name: "New title"
              changeDateSortie:
                summary: Change release date
                value:
                  id: 1
                  name: "release date"
              changeDurée:
                summary: Change duration
                value:
                  id: 1
                  durée: "1:57:03"
              changeRoom:
                summary: changer the room of projection
                value:
                  id: 1
                  enum: [A,B]
      responses:
          200:
            description: film Updated
            content:
              application/json:
                schema:
                    $ref: '#/components/schemas/Films'

          400:
            description: Bad request

  /film{id}:
      get: 
        tags:
          - Films
        summary: Get a film by identifier
        parameters:
          - name: id
            in: path
            required: true
            schema: 
              type: integer
        responses:
          200:
            description: the film
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/CreateFilms'

          400:
            description: Bad request
      put:
        tags:
          - Films
        summary: update all about a film 
        parameters:
          - name: id
            in: path
            required: true
            schema:
              type: integer
        responses:
          200:
            description: the film by id is updated
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/Films'
          400:
            description: Bad request
      patch:
        tags:
          - Films
        summary: update elements about film
        parameters:
          - name: id
            in: path
            required: true
            schema:
              type: integer
        responses:
          200:
            description: the film is partially updated
            content:
              application/json:
                schema:
                  type: integer
                  items:
                    $ref: '#/components/schemas/Films'
      delete:
        tags:
          - Films
        summary: deletes a projection by referring to its id
        operationId: delete a film
        parameters:
          - name: id
            in: path
            required: true
            schema:
              type: integer
        responses:
          200:
            description: Success
            content:
              text/plain:
                schema:
                  type: string
                  example: "Returns the id of the deleted projection"
          401:
            description: Unauthorized 
            content: {}
              
  /film/?category:
    get:
      tags:
      - Films
      summary: Get all films by categories
      operationId: getFilmsCategory 
      description: 'Get all films by categories'
      parameters:
      - name: Categories
        in: query
        required: true
        schema:
          type: string
      responses:
        200:
          description: List of films by categories
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Films'
        400:
          description: Bad request
  /film/week:
    get:
      tags:
      - Films
      summary: Get films each week
      operationId: getFilmsWeek 
      description: 'Get all films each week'
      parameters:
      - name: WeekDate
        in: path
        required: true
        schema:
          type: string
          format: date
      
      responses:
        200:
          description: List of films for the week
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Weekly'
        400:
          description: Bad request
  /room:
    get: 
      tags:
        - Room
      summary: Get all rooms
      operationId: getRooms
      description: 'Get rooms with details'
      parameters:
      - name: rooms
        in: query
        schema:
          type: integer
      responses:
        200:
          description: the rooms
          content:
            application/json:
              schema: 
                type: array
                items: 
                  $ref: '#/components/schemas/Room'
        400:
          description: bad request
  /room/{id}:
    get: 
      tags:
        - Room
      summary: Get a room by identifier
      operationId: getAroom
      description: 'Get room by identifier'
      parameters:
        - name: room
          in: path
          required: true
          schema:
           type: integer
      responses:
        200:
          description: the room
          content:
            application/json:
              schema: 
                type: array
                items: 
                  $ref: '#/components/schemas/Room'
        400:
          description: bad request
  
  /projection:
    get:
      tags:
        - Projection
      summary: Get all projections
      operationId: getProjection 
      description: 'Get all projections with details'
      parameters:
      - name: page
        in: query
        schema:
          type: integer
      - name: page_size
        in: query
        required: true
        schema:
          type: integer
      responses:
        200:
          description: the projection
          content:
            application/json:
              schema: 
                type: array
                items: 
                  $ref: '#/components/schemas/Projection'
        400:
          description: bad request
    post:
      tags:
        - Projection
      summary: create new projection
      operationId: newProject
      requestBody:
        required: true
        content:
          application/json:
            schema: 
              type: array
              items:
                $ref: '#/components/schemas/NewProjection'
      responses:
        200:
          description: success
          content:
            application/json:
              schema: 
                type: array
                items:
                  $ref: '#/components/schemas/NewProjection'
        400:
          description: Bad request
    put:
      tags:
        - Projection
      summary: update projection
      operationId: update all info
      parameters:
      - name: id
        in: query
        required: true
        schema:
          type: integer
      responses:
        200:
          description: success
          content:
            application/json:
              schema: 
                type: array
                items:
                  $ref: '#/components/schemas/NewProjection'
        400:
          description: Bad request
    patch:
      tags:
        - Projection
      summary: upadate existing projection
      description: |
        Possible updates openapi:
          * title: change
          * projection_room: change
          * diffusion: change
      operationId: projectUpdated
      requestBody:
        required: true
        content:
          application/json:
            schema:
                $ref: '#/components/schemas/Projection'
            examples:
              changeTitre:
                summary: Change title
                value:
                  id: 1
                  name: "New title"
              changeRoom:
                summary: change the projection room
                value:
                  id: 1
                  enum: [A,B]
              changeDiffusion:
                summary: change broadcast time
                value:
                  id: 2
                  hour: "18:00"
      responses:
        200:
          description: projection updated
          content:
            application/json:
              schema: 
                type: array
                items:
                  $ref: '#/components/schemas/Projection'
        404:
          description: not found
  /projection/{id}:
    get:
      tags:
        - Projection
      summary: get the projection by specified id
      operationId: getProjection
      parameters:
        - name: id
          in: path
          schema:
            type: integer
          required: true
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Projection"
        400:
          description: Error
          content: {}
    put:
      tags:
        - Projection
      summary: allows you to modify projection data except its id
      parameters:
        - name: id
          in: path
          schema:
            type: integer
          required: true
      requestBody:
        required: true
        description: new projection
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
              allOf:
                - $ref: "#/components/schemas/NewProjection"
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Projection"
        400:
          description: Error
          content: {}

    delete:
      tags:
        - Projection
      summary: delete a projection
      description: want to delete a projection
      operationId: delete
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: projection deleted
          content: {}
        401:
          description: Unauthorized 
  

components:
  schemas:
    Films:
      allOf:
        - $ref: '#/components/schemas/CreateFilms'
      type: object
      properties:
        id:
          type: integer
          example: 10     
    CreateFilms:
      type: object
      properties:
        Titre:
          type: string
          example: "Midnigth Sun"
        Durée:
          type: string
          format: date
          example: "2:04:15"
        Résume:
          type: string
        Réalisateur:
          type: string
          example: "PraPra"
        DateSortie:
          type: string
          format: date
          example: "2022-07-27"
        SalleProject:
          items:
            $ref: '#/components/schemas/Room'
        Categories:
          type: array
          items:
            $ref: '#/components/schemas/Categorie'

    Room: 
      type: object
      properties:
        Code:
          type: string
          enum: 
            - A
            - B  
        capacity:
          type: number
          example: 100
        
    Projection:
      allOf:
      - $ref: '#/components/schemas/Films'
      - $ref: '#/components/schemas/Room'
      type: object
      properties:
        id:
          type: integer
          example: 10
        diffusion:
          type: string
          format: date-time
          example: "2022-07-27 T22:35:18.068z"

    NewProjection:
      type: object
      properties:
        FilmId:
          type: integer
          example: 1
        RoomId:
          type: string
          example: A
        diffusion: 
          type: string
          format: date-time

    NewCategorie:
      type: object
      properties:
       Type:
        type: string
        example: Dramatic
    
    Categorie:
      allOf:
        - $ref: '#/components/schemas/NewCategorie'
      type: object
      properties:
        id:
          type: integer
          example: 18
        description: 
          type: string
          uniqueItems: true
        creationDate:
          type: string
          format: date
          example: "2022-01-08"
        
    Weekly:
      oneOf:
        - $ref: '#/components/schemas/Projection'
        - $ref: '#/components/schemas/Projection'
        - $ref: '#/components/schemas/Projection'
       
